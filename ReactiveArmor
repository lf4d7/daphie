local g={}g.secure=function()local b=replaceclosure or hookfunction b(hookfunction,function()return end)b(b,function()return end)b(setreadonly,function()return end)b(getreg,function()return end)end g.converttable=function(g)if type(g)~="table"then return error("The first argument must be a table")end local h=g.Table or g local i=g.Indent or 4 local j=true local k=g.LastBracketIndent or 0 if g.ShowKeys~=nil then j=g.ShowKeys end local function l(d)if type(d)=="table"then return converttable({["Table"]=d,["Indent"]=(i+(g.LastBracketIndent or i)),["ShowKeys"]=g.ShowKeys,["LastBracketIndent"]=i})end if type(d)=="string"then return'"'..d..'"'end if typeof(d)=="Instance"then b="game."if not d:FindFirstAncestorOfClass("game")then c=""end return Origin..d:GetFullName()end if typeof(d)=="CFrame"then return"CFrame.new("..tostring(d)..")"end if typeof(d)=="Vector3"then return"Vector3.new("..tostring(d)..")"end if typeof(d)=="Vector2"then return"Vector2.new("..tostring(d)..")"end if typeof(d)=="Color3"then return"Color3.new("..tostring(d)..")"end if typeof(d)=="BrickColor"then return"BrickColor.new("..tostring(d)..")"end return tostring(d)end local b=g.Indent or 4 local c="{\n"for g,h in pairs(h)do d="[\""..tostring(g).."\"] = "if type(g)=="number"then e="["..tostring(g).."] = "end if not j then f=""end c=c..string.rep(" ",b)..KeyString..l(h)..",\n"end c=c..string.rep(" ",k).."}"return c end g.convert=function(b)return g.converttable({["Table"]=b})end g.make_log=function(b,c)local d=""local e=DateTime.now():FormatLocalTime("DD MMMM HH:mm","en-us")local c=g.convert(c)d=string.format("%s - Calling a %s with arguments: %s",e,b,c)return d end g.save_log=function(b,c)if isfile(b)then appendfile(b,c)else writefile(b,c)end appendfile(b,"\n")end g.log=function(b,c,d)local c=g.make_log(c,d)g.save_log(b,c)end g.loaded=function()repeat task.wait()until game:IsLoaded()local b=require(game.ReplicatedStorage:WaitForChild('Framework'):WaitForChild('Library'))repeat task.wait()until b.Loaded return false end return g
